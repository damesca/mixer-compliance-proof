from babyjubjub import *
from point import Point
from sage.all_cmdline import *

BASE_EDW = Point(5299619240641551281634865583518297030282874472190772894086521144482721001553, 16950150798460657717958625567821834550301663161624707787222815936182638968203)
BASE_MONT = Point(7117928050407583618111176421555214756675765419608405867398403713213306743542, 14577268218881899420966779687690205425227431577728659819975198491127179315626)

# TEST CASE (CIRCOM) #
r = Integer(3214324247541768199397575577727515111331480179333491918497100258849983778571)
r_times_B_EDW = Point(16384280685785548380920737524197556602140925951023138587286011305043761015581, 2484496268900976691807207599030513457403224567123871059594147029020927944598)
######################

Fp = GF(21888242871839275222246405745257275088548364400416034343698204186575808495617)
curve = BabyJubJub()

def testConversions(curve, BASE_EDW, BASE_MONT):
    test_mont = curve.EdwToMont(BASE_EDW)
    print('TEST - EdwToMont: {}'.format(test_mont == BASE_MONT))
    test_edw = curve.MontToEdw(BASE_MONT)
    print('TEST - MontToEdw: {}'.format(test_edw == BASE_EDW))

def testEscalarMulEdw(curve, BASE_EDW, r, reference):
    BASE_MONT = curve.EdwToMont(BASE_EDW)
    BASE_WEIER = curve.MontToWeier(BASE_MONT)
    BASE_WEIER_cp = curve.getCurvePoint(BASE_WEIER)

    test_WEIEREXP_cp = r * BASE_WEIER_cp

    test_WEIEREXP = Point(test_WEIEREXP_cp[0], test_WEIEREXP_cp[1])
    print(test_WEIEREXP)
    test_MONTEXP = curve.WeierToMont(test_WEIEREXP)
    test_EDWEXP = curve.MontToEdw(test_MONTEXP)
    print('TEST - EscalarMulEdw: {}'.format(test_EDWEXP == reference))

def testAdd(curve):
    # Test values are in Edwards form (from:https://eips.ethereum.org/EIPS/eip-2494)
    x1 = 17777552123799933955779906779655732241715742912184938656739573121738514868268
    y1 = 2626589144620713026669568689430873010625803728049924121243784502389097019475
    x2 = 16540640123574156134436876038791482806971768689494387082833631921987005038935
    y2 = 20819045374670962167435360035096875258406992893633759881276124905556507972311
    x3 = 7916061937171219682591368294088513039687205273691143098332585753343424131937
    y3 = 14035240266687799601661095864649209771790948434046947201833777492504781204499
    P1 = curve.getCurvePoint(
        curve.MontToWeier(curve.EdwToMont(Point(x1, y1)))
    )
    P2 = curve.getCurvePoint(
        curve.MontToWeier(curve.EdwToMont(Point(x2, y2)))
    )
    P3 = P1 + P2
    P3_point = curve.MontToEdw(curve.WeierToMont(Point(P3[0], P3[1])))
    print('TEST - Addition: {}'.format(P3_point == Point(x3, y3)))
    
def testDoubling(curve):
    # Test values are in Edwards form (from:https://eips.ethereum.org/EIPS/eip-2494)
    x1 = 17777552123799933955779906779655732241715742912184938656739573121738514868268
    y1 = 2626589144620713026669568689430873010625803728049924121243784502389097019475
    x2 = 6890855772600357754907169075114257697580319025794532037257385534741338397365
    y2 = 4338620300185947561074059802482547481416142213883829469920100239455078257889
    P1 = curve.getCurvePoint(
        curve.MontToWeier(curve.EdwToMont(Point(x1, y1)))
    )
    P2 = 2*P1
    P2_point = curve.MontToEdw(curve.WeierToMont(Point(P2[0], P2[1])))
    print('TEST - Doubling: {}'.format(P2_point == Point(x2, y2)))

testConversions(curve, BASE_EDW, BASE_MONT)
testEscalarMulEdw(curve, BASE_EDW, r, r_times_B_EDW)
testAdd(curve)
testDoubling(curve)